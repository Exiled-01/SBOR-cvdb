<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SBOR Enhanced Database</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif;
            background: linear-gradient(135deg, #f0f8ff 0%, #f3f0ff 100%);
            min-height: 100vh;
            padding: 24px;
        }

        .container {
            max-width: 1600px;
            margin: 0 auto;
        }

        .main-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1),
                0 10px 10px -5px rgba(0, 0, 0, 0.04);
            padding: 32px;
            margin-bottom: 24px;
        }

        .title {
            font-size: 32px;
            font-weight: 700;
            color: #1f2937;
            text-align: center;
            margin-bottom: 32px;
        }

        .nav-tabs {
            display: flex;
            gap: 8px;
            margin-bottom: 32px;
            border-bottom: 2px solid #e5e7eb;
            flex-wrap: wrap;
        }

        .nav-tab {
            padding: 12px 24px;
            background: transparent;
            border: none;
            border-bottom: 3px solid transparent;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            color: #6b7280;
            transition: all 0.2s;
        }

        .nav-tab:hover {
            color: #3b82f6;
        }

        .nav-tab.active {
            color: #3b82f6;
            border-bottom-color: #3b82f6;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 20px;
            margin-bottom: 32px;
        }

        .stat-card {
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            color: white;
        }

        .stat-card.progress {
            background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        }

        .stat-card.completion {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }

        .stat-card.owned {
            background: linear-gradient(135deg, #8b5cf6 0%, #6d28d9 100%);
        }

        .stat-card.total-value {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        }

        .stat-card.most-valuable {
            background: linear-gradient(135deg, #ec4899 0%, #db2777 100%);
        }

        .stat-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .stat-value {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 4px;
        }

        .stat-subtitle {
            font-size: 13px;
            opacity: 0.9;
        }

        .controls {
            display: flex;
            gap: 12px;
            align-items: center;
            flex-wrap: wrap;
            margin-bottom: 24px;
        }

        .search-container {
            position: relative;
            flex: 1;
            min-width: 200px;
        }

        .search-input {
            width: 100%;
            padding: 10px 16px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.2s;
        }

        .search-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
        }

        .filter-select,
        .btn {
            padding: 10px 16px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 14px;
            background: white;
            cursor: pointer;
            transition: all 0.2s;
        }

        .filter-select:hover,
        .btn:hover {
            border-color: #3b82f6;
        }

        .filter-select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
        }

        .btn-primary {
            background: #3b82f6;
            color: white;
            border: none;
        }

        .btn-primary:hover {
            background: #2563eb;
        }

        .btn-success {
            background: #059669;
            color: white;
            border: none;
        }

        .btn-success:hover {
            background: #047857;
        }

        .table-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            border: 1px solid #e5e7eb;
            overflow: hidden;
        }

        .table-header {
            padding: 16px 24px;
            background: #f9fafb;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .table-title {
            font-size: 18px;
            font-weight: 600;
            color: #1f2937;
        }

        .table-wrapper {
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th {
            padding: 12px 16px;
            text-align: left;
            font-size: 14px;
            font-weight: 600;
            color: #374151;
            background: #f9fafb;
            border-bottom: 1px solid #e5e7eb;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        td {
            padding: 16px;
            font-size: 14px;
            border-bottom: 1px solid #e5e7eb;
            vertical-align: middle;
        }

        tr:hover {
            background: #f9fafb;
        }

        .item-name {
            font-weight: 500;
            color: #2563eb;
            text-decoration: none;
        }

        .item-name:hover {
            color: #1d4ed8;
            text-decoration: underline;
        }

        .col-value {
            font-family: 'Courier New', monospace;
            font-weight: 600;
        }

        .col-value.missing {
            color: #dc2626;
        }

        .col-value.completed {
            color: #059669;
        }

        .resale-amount {
            font-family: 'Courier New', monospace;
        }

        .how-to-obtain {
            max-width: 200px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            color: #6b7280;
        }

        .checkbox-cell {
            width: 40px;
            text-align: center;
        }

        .item-checkbox {
            width: 18px;
            height: 18px;
            cursor: pointer;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 32px;
            border-radius: 12px;
            width: 90%;
            max-width: 800px;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
        }

        .modal-title {
            font-size: 24px;
            font-weight: 700;
            color: #1f2937;
        }

        .close {
            font-size: 32px;
            font-weight: bold;
            color: #9ca3af;
            cursor: pointer;
            transition: color 0.2s;
        }

        .close:hover {
            color: #1f2937;
        }

        .comparison-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 24px;
        }

        .comparison-select {
            width: 100%;
            padding: 12px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 14px;
            margin-bottom: 16px;
        }

        .comparison-stats {
            background: #f9fafb;
            padding: 16px;
            border-radius: 8px;
        }

        .comparison-stat {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #e5e7eb;
        }

        .comparison-stat:last-child {
            border-bottom: none;
        }

        .comparison-label {
            font-weight: 600;
            color: #6b7280;
        }

        .comparison-value {
            color: #1f2937;
        }

        .calculator-input {
            width: 100%;
            padding: 12px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 14px;
            margin-bottom: 16px;
        }

        .calculator-result {
            background: #f0f9ff;
            border: 2px solid #3b82f6;
            padding: 20px;
            border-radius: 8px;
            margin-top: 16px;
        }

        .calculator-result-item {
            display: flex;
            justify-content: space-between;
            padding: 12px 0;
            border-bottom: 1px solid #bfdbfe;
        }

        .calculator-result-item:last-child {
            border-bottom: none;
        }

        .calculator-label {
            font-weight: 600;
            color: #1e40af;
        }

        .calculator-value {
            font-size: 18px;
            font-weight: 700;
            color: #1e40af;
            font-family: 'Courier New', monospace;
        }

        .category-progress {
            margin-bottom: 16px;
        }

        .category-progress-label {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 14px;
            font-weight: 600;
            color: #374151;
        }

        .progress-bar-container {
            width: 100%;
            height: 24px;
            background: #e5e7eb;
            border-radius: 12px;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #3b82f6 0%, #2563eb 100%);
            transition: width 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 12px;
            font-weight: 600;
        }

        @media (max-width: 768px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }

            .controls {
                flex-direction: column;
                align-items: stretch;
            }

            .comparison-grid {
                grid-template-columns: 1fr;
            }

            .modal-content {
                width: 95%;
                margin: 10% auto;
                padding: 20px;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="main-card">
            <h1 class="title">SBOR Enhanced Database</h1>

            <!-- Navigation Tabs -->
            <div class="nav-tabs">
                <button class="nav-tab active" data-section="weapons">Weapons</button>
                <button class="nav-tab" data-section="gear">Gear</button>
                <button class="nav-tab" data-section="calculator">Bulk Calculator</button>
            </div>

            <!-- Sub-category dropdown -->
            <div id="subcategory-selector" style="margin-bottom: 24px;">
                <label style="font-weight: 600; color: #374151; margin-right: 12px;">Category:</label>
                <select id="main-subcategory-filter" class="filter-select" style="min-width: 200px;">
                    <option value="one-handed">One-Handed</option>
                    <option value="two-handed">Two-Handed</option>
                    <option value="rapier">Rapier</option>
                    <option value="dagger">Dagger</option>
                    <option value="melee">Melee</option>
                </select>
            </div>

            <!-- Stats Cards -->
            <div class="stats-grid">
                <div class="stat-card progress">
                    <h3 class="stat-title">Index Progress</h3>
                    <p class="stat-value" id="progress-value">0/0</p>
                    <p class="stat-subtitle">Col values indexed</p>
                </div>
                <div class="stat-card completion">
                    <h3 class="stat-title">Database Complete</h3>
                    <p class="stat-value" id="completion-percentage">0%</p>
                    <p class="stat-subtitle">of entries filled out</p>
                </div>
                <div class="stat-card owned">
                    <h3 class="stat-title">Items Owned</h3>
                    <p class="stat-value" id="owned-items">0/0</p>
                    <p class="stat-subtitle">items in collection</p>
                </div>
                <div class="stat-card total-value">
                    <h3 class="stat-title">Total Value</h3>
                    <p class="stat-value" id="total-value">0</p>
                    <p class="stat-subtitle">col value of owned items</p>
                </div>
                <div class="stat-card most-valuable">
                    <h3 class="stat-title">Most Valuable</h3>
                    <p class="stat-value" id="most-valuable">None</p>
                    <p class="stat-subtitle">highest sellable item owned</p>
                </div>
            </div>

            <!-- Category Progress Bars -->
            <div id="category-progress-section" style="margin-bottom: 32px;">
                <h3 style="font-size: 18px; font-weight: 600; margin-bottom: 16px; color: #1f2937;">Category Progress</h3>
                <div id="category-progress-bars"></div>
            </div>

            <!-- Controls -->
            <div class="controls">
                <div class="search-container">
                    <input type="text" id="search-input" class="search-input" placeholder="Search items..." />
                </div>
                <button class="btn btn-primary" id="toggle-advanced-search">Advanced Search</button>
                <button class="btn btn-primary" id="compare-button">Compare Items</button>
                <button class="btn btn-success" id="export-button">Export CSV</button>
            </div>

            <!-- Advanced Search Panel -->
            <div id="advanced-search-panel" style="display: none; padding: 20px; background: #f9fafb; border-radius: 8px; margin-bottom: 24px; border: 1px solid #e5e7eb;">
                <h3 style="font-size: 16px; font-weight: 600; margin-bottom: 16px; color: #1f2937;">Advanced Search Options</h3>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px;">
                    <div>
                        <label style="display: block; margin-bottom: 4px; font-size: 14px; font-weight: 500; color: #374151;">Category Filter:</label>
                        <select id="category-filter" class="filter-select" style="width: 100%;">
                            <option value="all">All Categories</option>
                        </select>
                    </div>

                    <div>
                        <label style="display: block; margin-bottom: 4px; font-size: 14px; font-weight: 500; color: #374151;">Ownership:</label>
                        <select id="ownership-filter" class="filter-select" style="width: 100%;">
                            <option value="all">All Items</option>
                            <option value="owned">Owned Only</option>
                            <option value="missing">Missing Only</option>
                        </select>
                    </div>

                    <div>
                        <label style="display: block; margin-bottom: 4px; font-size: 14px; font-weight: 500; color: #374151;">Sort By:</label>
                        <select id="sort-filter" class="filter-select" style="width: 100%;">
                            <option value="col-asc">Col Value (Low to High)</option>
                            <option value="col-desc">Col Value (High to Low)</option>
                            <option value="skill-asc">Max Skill (Low to High)</option>
                            <option value="skill-desc">Max Skill (High to Low)</option>
                            <option value="name-asc">Name (A to Z)</option>
                        </select>
                    </div>

                    <div>
                        <label style="display: block; margin-bottom: 4px; font-size: 14px; font-weight: 500; color: #374151;">Obtain Method:</label>
                        <select id="obtain-filter" class="filter-select" style="width: 100%;">
                            <option value="all">All Sources</option>
                            <option value="shop">Shop</option>
                            <option value="mob">Mob Drop</option>
                            <option value="blacksmithing">Blacksmithing</option>
                            <option value="quest">Quest</option>
                        </select>
                    </div>

                    <div>
                        <label style="display: block; margin-bottom: 4px; font-size: 14px; font-weight: 500; color: #374151;">Skill Range:</label>
                        <div style="display: flex; gap: 8px;">
                            <input type="number" id="skill-min" placeholder="Min" min="0" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
                            <span style="align-self: center; color: #6b7280;">-</span>
                            <input type="number" id="skill-max" placeholder="Max" min="0" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
                        </div>
                    </div>

                    <div>
                        <label style="display: block; margin-bottom: 4px; font-size: 14px; font-weight: 500; color: #374151;">Col Value Range:</label>
                        <div style="display: flex; gap: 8px;">
                            <input type="number" id="col-min" placeholder="Min" min="0" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
                            <span style="align-self: center; color: #6b7280;">-</span>
                            <input type="number" id="col-max" placeholder="Max" min="0" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
                        </div>
                    </div>
                </div>
            </div>

            <!-- Data Table -->
            <div class="table-container">
                <div class="table-header">
                    <h3 class="table-title" id="table-title">All Items</h3>
                    <div>
                        <button class="btn btn-primary" id="export-owned-button" style="margin-right: 8px;">Export Owned</button>
                        <button class="btn btn-primary" id="export-missing-button">Export Missing</button>
                    </div>
                </div>

                <div class="table-wrapper">
                    <table>
                        <thead>
                            <tr>
                                <th class="checkbox-cell">Own</th>
                                <th>Item Name</th>
                                <th>Max Skill</th>
                                <th id="stat-header">Attack</th>
                                <th>Col Value</th>
                                <th>Resale</th>
                                <th>Resale (VM)</th>
                                <th>How to Obtain</th>
                            </tr>
                        </thead>
                        <tbody id="item-table"></tbody>
                    </table>
                </div>
            </div>

            <!-- Instructions -->
            <div style="margin-top: 32px; padding: 24px; background: #f0f9ff; border-radius: 8px; border: 1px solid #3b82f6;">
                <h3 style="font-weight: 600; margin-bottom: 12px; color: #1e40af; font-size: 18px;">How to Use This Database:</h3>
                <ul style="color: #1e40af; font-size: 14px; list-style-position: inside; line-height: 1.8;">
                    <li><strong>Check the boxes</strong> next to items you own to track your collection</li>
                    <li><strong>Click item names</strong> to visit their wiki pages</li>
                    <li><strong>Use the category dropdown</strong> to view specific item types</li>
                    <li><strong>Red "TBD"</strong> means the Col value still needs to be indexed</li>
                    <li><strong>Green numbers</strong> show completed Col value entries</li>
                    <li><strong>Use Advanced Search</strong> for powerful filtering options</li>
                    <li><strong>Compare Items</strong> to see stat differences side-by-side</li>
                </ul>

                <h3 style="margin-top: 24px; font-weight: 600; margin-bottom: 12px; color: #1e40af; font-size: 18px;">Resale Value Formula:</h3>
                <ul style="color: #1e40af; font-size: 14px; list-style-position: inside; line-height: 1.8;">
                    <li><strong>Base Resale:</strong> 35% of the Col Value (Col Value × 0.35)</li>
                    <li><strong>With Veteran Merchant Gamepass:</strong> 45% of the Col Value (Col Value × 0.45)</li>
                    <li><strong>Two ways to understand the VM bonus:</strong>
                        <ul style="margin-top: 8px; margin-left: 20px; list-style-type: circle;">
                            <li>You keep 10 percentage points more of the original Col Value (45% instead of 35%)</li>
                            <li>Or, the gamepass increases your base resale by 28.57% (Base Resale × 1.2857)</li>
                        </ul>
                    </li>
                    <li><strong>Example with 10,000 Col Value:</strong> Base = 3,500 | VM = 4,500 | Bonus = 1,000</li>
                </ul>

                <h3 style="margin-top: 24px; font-weight: 600; margin-bottom: 12px; color: #1e40af; font-size: 18px;">Visualize on Desmos:</h3>
                <p style="margin-bottom: 8px; color: #1e40af; font-size: 14px;">Copy and paste this into <a href="https://www.desmos.com/calculator" target="_blank" style="color: #2563eb; text-decoration: underline;">Desmos Graphing Calculator</a> to see the relationship between Col Value and Resale Amount:</p>
                <pre style="background: #dbeafe; padding: 12px; border-radius: 6px; overflow-x: auto; font-size: 12px; font-family: 'Courier New', monospace; color: #1e40af; border: 1px solid #93c5fd;">y=0.35x
y=0.45x</pre>
                <p style="font-size: 14px; margin-top: 8px; color: #1e40af;">The first line (y=0.35x) shows base resale at 35%. The second line (y=0.45x) shows VM resale at 45%. The vertical distance between the lines represents the gamepass bonus.</p>
            </div>
        </div>

        <!-- Comparison Modal -->
        <div id="comparison-modal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Compare Items</h2>
                    <span class="close" id="close-comparison">&times;</span>
                </div>
                <div class="comparison-grid">
                    <div>
                        <select id="compare-item-1" class="comparison-select">
                            <option value="">Select Item 1</option>
                        </select>
                        <div id="comparison-stats-1" class="comparison-stats"></div>
                    </div>
                    <div>
                        <select id="compare-item-2" class="comparison-select">
                            <option value="">Select Item 2</option>
                        </select>
                        <div id="comparison-stats-2" class="comparison-stats"></div>
                    </div>
                </div>
                <div id="comparison-result" style="margin-top: 24px; padding: 20px; background: #f0f9ff; border-radius: 8px; display: none;">
                    <h3 style="font-weight: 600; color: #1e40af; margin-bottom: 12px;">Analysis</h3>
                    <div id="comparison-analysis"></div>
                </div>
            </div>
        </div>

        <!-- Bulk Calculator -->
        <div id="calculator-section" style="display: none;">
            <div class="main-card">
                <h2 class="modal-title" style="margin-bottom: 24px;">Bulk Selling Calculator</h2>
                <div>
                    <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #374151;">Item Col Value:</label>
                    <input type="number" id="calc-col-value" class="calculator-input" placeholder="Enter col value" min="0">

                    <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #374151;">Quantity:</label>
                    <input type="number" id="calc-quantity" class="calculator-input" placeholder="Enter quantity" min="1" value="1">

                    <button class="btn btn-primary" id="calculate-button" style="width: 100%;">Calculate</button>

                    <div id="calculator-results" style="display: none;">
                        <div class="calculator-result">
                            <div class="calculator-result-item">
                                <span class="calculator-label">Base Resale (35%):</span>
                                <span class="calculator-value" id="calc-base-resale">0</span>
                            </div>
                            <div class="calculator-result-item">
                                <span class="calculator-label">VM Resale (45%):</span>
                                <span class="calculator-value" id="calc-vm-resale">0</span>
                            </div>
                            <div class="calculator-result-item">
                                <span class="calculator-label">VM Bonus:</span>
                                <span class="calculator-value" id="calc-vm-bonus">0</span>
                            </div>
                            <div class="calculator-result-item">
                                <span class="calculator-label">Total Col Value:</span>
                                <span class="calculator-value" id="calc-total-col">0</span>
                            </div>
                        </div>

                        <div style="margin-top: 24px;">
                            <h3 style="font-weight: 600; color: #374151; margin-bottom: 12px;">Quantity Breakpoints</h3>
                            <div id="calc-breakpoints" style="background: #f9fafb; padding: 16px; border-radius: 8px;"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const items = {
                weapons: {
                    'one-handed': [{
                            id: 1,
                            "name": "Beginner Sword",
                            "maxSkill": 1,
                            "attack": 3.4,
                            "colValue": 231,
                            "resaleAmount": "80",
                            "resaleAmountVM": "103",
                            "howToObtain": "Starter Inventory, Floor 1 shop"
                        },
                        {
                            id: 2,
                            "name": "Iron Sword",
                            "maxSkill": 1,
                            "attack": 3.4,
                            "colValue": 231,
                            "resaleAmount": "80",
                            "resaleAmountVM": "103",
                            "howToObtain": "Floor 1 Shop"
                        },
                    
                ],
                'two-handed': [],
                'rapier': [],
                'dagger': [],
                'melee': []
            },
            armor: [],
            'upper-headwear': [],
            'lower-headwear': [],
            shields: []
        };

        let ownedItems = new Set();
        let currentSection = 'weapons';
        let currentSubcategory = 'one-handed';
        let currentCategory = 'all';
        let filteredItems = [];

        // Load from localStorage
        function loadOwnedItems() {
            try {
                const stored = window.localStorage.getItem('sbor-owned-items');
                if (stored) {
                    ownedItems = new Set(JSON.parse(stored));
                }
            } catch (error) {
                console.warn('Could not load owned items:', error);
            }
        }

        // Save to localStorage
        function saveOwnedItems() {
            try {
                window.localStorage.setItem('sbor-owned-items', JSON.stringify(Array.from(ownedItems)));
            } catch (error) {
                console.warn('Could not save owned items:', error);
            }
        }

        function getAllItems() {
            if (currentSection === 'weapons') {
                return Object.values(items.weapons).flat();
            } else if (currentSection === 'gear') {
                return [...items.armor, ...items['upper-headwear'], ...items['lower-headwear'], ...items.shields];
            }
            return [];
        }

        function getCurrentSubcategoryItems() {
            if (currentSection === 'weapons') {
                return items.weapons[currentSubcategory] || [];
            } else if (currentSection === 'gear') {
                if (currentSubcategory === 'armor') return items.armor;
                if (currentSubcategory === 'upper-headwear') return items['upper-headwear'];
                if (currentSubcategory === 'lower-headwear') return items['lower-headwear'];
                if (currentSubcategory === 'shields') return items.shields;
            }
            return [];
        }

        function getItemId(item) {
            return `${currentSection}-${currentSubcategory}-${item.name}`;
        }

        function wikiUrl(name) {
            return "https://swordbloxonlinerebirth.fandom.com/wiki/" + name.replace(/ /g, "_");
        }

        function updateStats() {
            const allItems = getAllItems();
            const completedItems = allItems.filter(item => item.colValue !== null && item.colValue !== 'N/A').length;
            const completionPercentage = allItems.length > 0 ? Math.round((completedItems / allItems.length) * 100) : 0;

            const ownedCount = Array.from(ownedItems).filter(id => {
                return allItems.some(item => getItemId(item) === id);
            }).length;

            document.getElementById('progress-value').textContent = `${completedItems}/${allItems.length}`;
            document.getElementById('completion-percentage').textContent = `${completionPercentage}%`;
            document.getElementById('owned-items').textContent = `${ownedCount}/${allItems.length}`;

            let totalValue = 0;
            let mostValuableItem = null;
            let highestValue = 0;

            allItems.forEach(item => {
                const itemId = getItemId(item);
                if (ownedItems.has(itemId) && item.colValue && item.colValue !== 'N/A') {
                    totalValue += item.colValue;

                    if (item.resaleAmount !== 'Cannot be sold' &&
                        item.resaleAmount !== 'cannot be sold' &&
                        item.resaleAmount !== 'N/A' &&
                        item.colValue > highestValue) {
                        highestValue = item.colValue;
                        mostValuableItem = item.name;
                    }
                }
            });

            document.getElementById('total-value').textContent = totalValue.toLocaleString();
            document.getElementById('most-valuable').textContent = mostValuableItem || 'None';

            updateCategoryProgress();
        }

        function updateCategoryProgress() {
            const progressContainer = document.getElementById('category-progress-bars');
            progressContainer.innerHTML = '';

            if (currentSection === 'weapons') {
                Object.keys(items.weapons).forEach(category => {
                    const categoryItems = items.weapons[category];
                    const completed = categoryItems.filter(item => item.colValue !== null && item.colValue !== 'N/A').length;
                    const percentage = categoryItems.length > 0 ? Math.round((completed / categoryItems.length) * 100) : 0;

                    const progressDiv = document.createElement('div');
                    progressDiv.className = 'category-progress';
                    progressDiv.innerHTML = `
                        <div class="category-progress-label">
                            <span>${category.charAt(0).toUpperCase() + category.slice(1)}</span>
                            <span>${completed}/${categoryItems.length}</span>
                        </div>
                        <div class="progress-bar-container">
                            <div class="progress-bar" style="width: ${percentage}%">${percentage}%</div>
                        </div>
                    `;
                    progressContainer.appendChild(progressDiv);
                });
            } else if (currentSection === 'gear') {
                const gearCategories = {
                    'armor': items.armor,
                    'upper-headwear': items['upper-headwear'],
                    'lower-headwear': items['lower-headwear'],
                    'shields': items.shields
                };

                Object.keys(gearCategories).forEach(category => {
                    const categoryItems = gearCategories[category];
                    const completed = categoryItems.filter(item => item.colValue !== null && item.colValue !== 'N/A').length;
                    const percentage = categoryItems.length > 0 ? Math.round((completed / categoryItems.length) * 100) : 0;

                    const progressDiv = document.createElement('div');
                    progressDiv.className = 'category-progress';
                    const displayName = category === 'upper-headwear' ? 'Upper Headwear' :
                        category === 'lower-headwear' ? 'Lower Headwear' :
                        category.charAt(0).toUpperCase() + category.slice(1);
                    progressDiv.innerHTML = `
                        <div class="category-progress-label">
                            <span>${displayName}</span>
                            <span>${completed}/${categoryItems.length}</span>
                        </div>
                        <div class="progress-bar-container">
                            <div class="progress-bar" style="width: ${percentage}%">${percentage}%</div>
                        </div>
                    `;
                    progressContainer.appendChild(progressDiv);
                });
            }
        }

        function toggleOwnership(item, checkbox) {
            const itemId = getItemId(item);
            if (checkbox.checked) {
                ownedItems.add(itemId);
            } else {
                ownedItems.delete(itemId);
            }
            saveOwnedItems();
            updateStats();
        }

        function renderItemRow(item) {
            const tr = document.createElement('tr');
            const itemId = getItemId(item);

            const ownCheckbox = document.createElement('input');
            ownCheckbox.type = 'checkbox';
            ownCheckbox.className = 'item-checkbox';
            ownCheckbox.checked = ownedItems.has(itemId);
            ownCheckbox.addEventListener('change', () => toggleOwnership(item, ownCheckbox));

            const ownCell = document.createElement('td');
            ownCell.className = 'checkbox-cell';
            ownCell.appendChild(ownCheckbox);
            tr.appendChild(ownCell);

            const nameCell = document.createElement('td');
            const nameLink = document.createElement('a');
            nameLink.href = wikiUrl(item.name);
            nameLink.target = '_blank';
            nameLink.className = 'item-name';
            nameLink.textContent = item.name;
            nameCell.appendChild(nameLink);
            tr.appendChild(nameCell);

            const skillCell = document.createElement('td');
            skillCell.textContent = item.maxSkill || '';
            tr.appendChild(skillCell);

            const attackCell = document.createElement('td');
            if (currentSection === 'gear') {
                attackCell.textContent = `${item.defense || ''} / ${item.dexterity || ''}`;
            } else {
                attackCell.textContent = item.attack || '';
            }
            tr.appendChild(attackCell);

            const colValueCell = document.createElement('td');
            const colValueSpan = document.createElement('span');
            colValueSpan.className = 'col-value ' + (item.colValue === null || item.colValue === 'N/A' ? 'missing' : 'completed');
            colValueSpan.textContent = item.colValue === null || item.colValue === 'N/A' ? 'TBD' : item.colValue.toLocaleString();
            colValueCell.appendChild(colValueSpan);
            tr.appendChild(colValueCell);

            const resaleCell = document.createElement('td');
            resaleCell.className = 'resale-amount';
            resaleCell.textContent = item.resaleAmount || '-';
            tr.appendChild(resaleCell);

            const resaleVMCell = document.createElement('td');
            resaleVMCell.className = 'resale-amount';
            resaleVMCell.textContent = item.resaleAmountVM || '-';
            tr.appendChild(resaleVMCell);

            const obtainCell = document.createElement('td');
            obtainCell.className = 'how-to-obtain';
            obtainCell.title = item.howToObtain || '';
            obtainCell.textContent = item.howToObtain || '';
            tr.appendChild(obtainCell);

            return tr;
        }

        function renderTable() {
            const tbody = document.getElementById('item-table');
            tbody.innerHTML = '';

            filteredItems.forEach(item => {
                tbody.appendChild(renderItemRow(item));
            });
        }

        function filterItems() {
            const searchTerm = document.getElementById('search-input').value.toLowerCase();
            const ownershipFilter = document.getElementById('ownership-filter').value;
            const sortFilter = document.getElementById('sort-filter').value;
            const obtainFilter = document.getElementById('obtain-filter').value;
            const skillMin = parseInt(document.getElementById('skill-min').value) || 0;
            const skillMax = parseInt(document.getElementById('skill-max').value) || Infinity;
            const colMin = parseInt(document.getElementById('col-min').value) || 0;
            const colMax = parseInt(document.getElementById('col-max').value) || Infinity;

            let itemList;
            if (currentCategory === 'all') {
                itemList = getAllItems();
            } else {
                itemList = getCurrentSubcategoryItems();
            }

            filteredItems = itemList.filter(item => {
                const itemId = getItemId(item);

                if (searchTerm && !item.name.toLowerCase().includes(searchTerm)) return false;

                if (ownershipFilter === 'owned' && !ownedItems.has(itemId)) return false;
                if (ownershipFilter === 'missing' && ownedItems.has(itemId)) return false;

                if (obtainFilter !== 'all') {
                    const obtain = (item.howToObtain || '').toLowerCase();
                    if (obtainFilter === 'shop' && !obtain.includes('shop')) return false;
                    if (obtainFilter === 'mob' && (obtain.includes('shop') || obtain.includes('blacksmithing') || obtain.includes('quest'))) return false;
                    if (obtainFilter === 'blacksmithing' && !obtain.includes('blacksmithing')) return false;
                    if (obtainFilter === 'quest' && !obtain.includes('quest')) return false;
                }

                const maxSkill = parseInt(item.maxSkill) || 0;
                if (maxSkill < skillMin || maxSkill > skillMax) return false;

                const colValue = item.colValue || 0;
                if (colValue !== 'N/A' && (colValue < colMin || colValue > colMax)) return false;

                return true;
            });

            filteredItems.sort((a, b) => {
                switch (sortFilter) {
                    case 'col-asc':
                        return (a.colValue === 'N/A' ? Infinity : (a.colValue || 0)) - (b.colValue === 'N/A' ? Infinity : (b.colValue || 0));
                    case 'col-desc':
                        return (b.colValue === 'N/A' ? -Infinity : (b.colValue || 0)) - (a.colValue === 'N/A' ? -Infinity : (a.colValue || 0));
                    case 'skill-asc':
                        return (parseInt(a.maxSkill) || 0) - (parseInt(b.maxSkill) || 0);
                    case 'skill-desc':
                        return (parseInt(b.maxSkill) || 0) - (parseInt(a.maxSkill) || 0);
                    case 'name-asc':
                        return a.name.localeCompare(b.name);
                    default:
                        return 0;
                }
            });

            const categoryName = currentCategory === 'all' ? currentSection : currentSubcategory;
            const displayName = categoryName === 'upper-headwear' ? 'Upper Headwear' :
                categoryName === 'lower-headwear' ? 'Lower Headwear' :
                categoryName.charAt(0).toUpperCase() + categoryName.slice(1);
            document.getElementById('table-title').textContent = `${displayName} (${filteredItems.length} items)`;

            renderTable();
        }

        function exportCSV(filterType = 'all') {
            let exportItems;
            const allItems = getAllItems();

            switch (filterType) {
                case 'owned':
                    exportItems = allItems.filter(item => ownedItems.has(getItemId(item)));
                    break;
                case 'missing':
                    exportItems = allItems.filter(item => !ownedItems.has(getItemId(item)));
                    break;
                case 'category':
                    exportItems = filteredItems;
                    break;
                default:
                    exportItems = allItems;
            }

            const csvHeader = "Item Name,Type,Max Skill,Attack,Defense,Dexterity,Col Value,Resale,Resale (VM),How to Obtain,Wiki URL\n";
            const csvRows = exportItems.map(item => {
                const name = `"${item.name}"`;
                const type = currentSection;
                const maxSkill = item.maxSkill || "";
                const attack = item.attack || "";
                const defense = item.defense || "";
                const dexterity = item.dexterity || "";
                const colValue = item.colValue !== null && item.colValue !== 'N/A' ? item.colValue : "TBD";
                const resale = `"${item.resaleAmount || ""}"`;
                const resaleVM = `"${item.resaleAmountVM || ""}"`;
                const howToObtain = `"${item.howToObtain || ""}"`;
                const wikiLink = `"${wikiUrl(item.name)}"`;

                return `${name},${type},${maxSkill},${attack},${defense},${dexterity},${colValue},${resale},${resaleVM},${howToObtain},${wikiLink}`;
            }).join("\n");

            const csvContent = csvHeader + csvRows;
            const blob = new Blob([csvContent], {
                type: "text/csv"
            });
            const url = URL.createObjectURL(blob);

            const link = document.createElement("a");
            link.href = url;
            link.download = `sbor_${filterType}_${currentSection}.csv`;
            link.click();

            URL.revokeObjectURL(url);
        }

        function openComparison() {
            const modal = document.getElementById('comparison-modal');
            modal.style.display = 'block';

            const allItems = getAllItems();
            const select1 = document.getElementById('compare-item-1');
            const select2 = document.getElementById('compare-item-2');

            select1.innerHTML = '<option value="">Select Item 1</option>';
            select2.innerHTML = '<option value="">Select Item 2</option>';

            allItems.forEach((item, index) => {
                const option1 = document.createElement('option');
                option1.value = index;
                option1.textContent = item.name;
                select1.appendChild(option1);

                const option2 = document.createElement('option');
                option2.value = index;
                option2.textContent = item.name;
                select2.appendChild(option2);
            });
        }

        function displayComparisonStats(item, containerId) {
            const container = document.getElementById(containerId);
            if (!item) {
                container.innerHTML = '<p style="color: #6b7280;">Select an item to compare</p>';
                return;
            }

            container.innerHTML = `
                <div class="comparison-stat">
                    <span class="comparison-label">Name:</span>
                    <span class="comparison-value">${item.name}</span>
                </div>
                <div class="comparison-stat">
                    <span class="comparison-label">Max Skill:</span>
                    <span class="comparison-value">${item.maxSkill || 'N/A'}</span>
                </div>
                <div class="comparison-stat">
                    <span class="comparison-label">${currentSection === 'gear' ? 'Defense:' : 'Attack:'}</span>
                    <span class="comparison-value">${currentSection === 'gear' ? (item.defense || 'N/A') : (item.attack || 'N/A')}</span>
                </div>
                ${currentSection === 'gear' ? `<div class="comparison-stat">
                    <span class="comparison-label">Dexterity:</span>
                    <span class="comparison-value">${item.dexterity || 'N/A'}</span>
                </div>` : ''}
                <div class="comparison-stat">
                    <span class="comparison-label">Col Value:</span>
                    <span class="comparison-value">${item.colValue !== null && item.colValue !== 'N/A' ? item.colValue.toLocaleString() : 'TBD'}</span>
                </div>
                <div class="comparison-stat">
                    <span class="comparison-label">Resale (Base):</span>
                    <span class="comparison-value">${item.resaleAmount || '-'}</span>
                </div>
                <div class="comparison-stat">
                    <span class="comparison-label">Resale (VM):</span>
                    <span class="comparison-value">${item.resaleAmountVM || '-'}</span>
                </div>
                <div class="comparison-stat">
                    <span class="comparison-label">How to Obtain:</span>
                    <span class="comparison-value" style="font-size: 12px;">${item.howToObtain || 'Unknown'}</span>
                </div>
            `;
        }

        function compareItems(item1, item2) {
            if (!item1 || !item2) return;

            const resultDiv = document.getElementById('comparison-result');
            const analysisDiv = document.getElementById('comparison-analysis');
            resultDiv.style.display = 'block';

            let analysis = [];

            const stat1 = currentSection === 'gear' ? (parseFloat(item1.defense) || 0) : (parseFloat(item1.attack) || 0);
            const stat2 = currentSection === 'gear' ? (parseFloat(item2.defense) || 0) : (parseFloat(item2.attack) || 0);
            const statName = currentSection === 'gear' ? 'defense' : 'attack';

            if (stat1 > stat2) {
                analysis.push(`✓ ${item1.name} has higher ${statName} (${stat1} vs ${stat2})`);
            } else if (stat2 > stat1) {
                analysis.push(`✓ ${item2.name} has higher ${statName} (${stat2} vs ${stat1})`);
            }

            const col1 = item1.colValue === 'N/A' ? 0 : (item1.colValue || 0);
            const col2 = item2.colValue === 'N/A' ? 0 : (item2.colValue || 0);
            if (col1 > col2) {
                analysis.push(`✓ ${item1.name} has higher col value (${col1.toLocaleString()} vs ${col2.toLocaleString()})`);
            } else if (col2 > col1) {
                analysis.push(`✓ ${item2.name} has higher col value (${col2.toLocaleString()} vs ${col1.toLocaleString()})`);
            }

            if (stat1 > 0 && stat2 > 0 && col1 > 0 && col2 > 0) {
                const value1 = col1 / stat1;
                const value2 = col2 / stat2;
                if (value1 < value2) {
                    analysis.push(`✓ ${item1.name} is better value (${Math.round(value1)} col per ${statName} point vs ${Math.round(value2)})`);
                } else if (value2 < value1) {
                    analysis.push(`✓ ${item2.name} is better value (${Math.round(value2)} col per ${statName} point vs ${Math.round(value1)})`);
                }
            }

            analysisDiv.innerHTML = analysis.join('<br>');
        }

        function calculateBulkSelling() {
            const colValue = parseInt(document.getElementById('calc-col-value').value) || 0;
            const quantity = parseInt(document.getElementById('calc-quantity').value) || 1;

            if (colValue === 0) {
                alert('Please enter a col value');
                return;
            }

            const baseResale = Math.floor(colValue * 0.35 * quantity);
            const vmResale = Math.floor(colValue * 0.45 * quantity);
            const vmBonus = vmResale - baseResale;
            const totalCol = colValue * quantity;

            document.getElementById('calc-base-resale').textContent = baseResale.toLocaleString();
            document.getElementById('calc-vm-resale').textContent = vmResale.toLocaleString();
            document.getElementById('calc-vm-bonus').textContent = vmBonus.toLocaleString();
            document.getElementById('calc-total-col').textContent = totalCol.toLocaleString();

            const breakpoints = [1, 5, 10, 25, 50, 100];
            const breakpointsHTML = breakpoints.map(qty => {
                const base = Math.floor(colValue * 0.35 * qty);
                const vm = Math.floor(colValue * 0.45 * qty);
                return `
                    <div style="display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #e5e7eb;">
                        <span style="font-weight: 600;">×${qty}:</span>
                        <span>Base: ${base.toLocaleString()} | VM: ${vm.toLocaleString()}</span>
                    </div>
                `;
            }).join('');

            document.getElementById('calc-breakpoints').innerHTML = breakpointsHTML;
            document.getElementById('calculator-results').style.display = 'block';
        }

        // Event Listeners
        document.querySelectorAll('.nav-tab').forEach(tab => {
            tab.addEventListener('click', () => {
                document.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active'));
                tab.classList.add('active');

                const section = tab.dataset.section;

                document.getElementById('calculator-section').style.display = 'none';
                document.getElementById('subcategory-selector').style.display = 'none';
                document.querySelector('.stats-grid').style.display = section === 'calculator' ? 'none' : 'grid';
                document.getElementById('category-progress-section').style.display = section === 'calculator' ? 'none' : 'block';
                document.querySelector('.controls').style.display = section === 'calculator' ? 'none' : 'flex';
                document.querySelector('.table-container').style.display = section === 'calculator' ? 'none' : 'block';

                if (section === 'calculator') {
                    document.getElementById('calculator-section').style.display = 'block';
                } else {
                    currentSection = section;
                    document.getElementById('subcategory-selector').style.display = 'block';

                    const statHeader = document.getElementById('stat-header');
                    if (section === 'gear') {
                        statHeader.textContent = 'Defense / Dexterity';
                    } else {
                        statHeader.textContent = 'Attack';
                    }

                    const subcategoryFilter = document.getElementById('main-subcategory-filter');
                    if (section === 'weapons') {
                        subcategoryFilter.innerHTML = `
                            <option value="one-handed">One-Handed</option>
                            <option value="two-handed">Two-Handed</option>
                            <option value="rapier">Rapier</option>
                            <option value="dagger">Dagger</option>
                            <option value="melee">Melee</option>
                        `;
                        currentSubcategory = 'one-handed';
                    } else if (section === 'gear') {
                        subcategoryFilter.innerHTML = `
                            <option value="armor">Armor</option>
                            <option value="upper-headwear">Upper Headwear</option>
                            <option value="lower-headwear">Lower Headwear</option>
                            <option value="shields">Shields</option>
                        `;
                        currentSubcategory = 'armor';
                    }

                    currentCategory = 'all';

                    updateStats();
                    filterItems();
                }
            });
        });

        document.getElementById('main-subcategory-filter').addEventListener('change', (e) => {
            currentSubcategory = e.target.value;
            currentCategory = 'specific';
            filterItems();
        });

        document.getElementById('toggle-advanced-search').addEventListener('click', () => {
            const panel = document.getElementById('advanced-search-panel');
            const btn = document.getElementById('toggle-advanced-search');
            if (panel.style.display === 'none') {
                panel.style.display = 'block';
                btn.textContent = 'Hide Advanced Search';
            } else {
                panel.style.display = 'none';
                btn.textContent = 'Advanced Search';
            }
        });

        document.getElementById('search-input').addEventListener('input', filterItems);
        document.getElementById('category-filter').addEventListener('change', (e) => {
            currentCategory = e.target.value;
            filterItems();
        });
        document.getElementById('ownership-filter').addEventListener('change', filterItems);
        document.getElementById('sort-filter').addEventListener('change', filterItems);
        document.getElementById('obtain-filter').addEventListener('change', filterItems);
        document.getElementById('skill-min').addEventListener('input', filterItems);
        document.getElementById('skill-max').addEventListener('input', filterItems);
        document.getElementById('col-min').addEventListener('input', filterItems);
        document.getElementById('col-max').addEventListener('input', filterItems);

        document.getElementById('export-button').addEventListener('click', () => exportCSV('category'));
        document.getElementById('export-owned-button').addEventListener('click', () => exportCSV('owned'));
        document.getElementById('export-missing-button').addEventListener('click', () => exportCSV('missing'));

        document.getElementById('compare-button').addEventListener('click', openComparison);
        document.getElementById('close-comparison').addEventListener('click', () => {
            document.getElementById('comparison-modal').style.display = 'none';
        });

        document.getElementById('compare-item-1').addEventListener('change', (e) => {
            const allItems = getAllItems();
            const item = allItems[e.target.value];
            displayComparisonStats(item, 'comparison-stats-1');

            const item2Index = document.getElementById('compare-item-2').value;
            if (item2Index) {
                compareItems(item, allItems[item2Index]);
            }
        });

        document.getElementById('compare-item-2').addEventListener('change', (e) => {
            const allItems = getAllItems();
            const item = allItems[e.target.value];
            displayComparisonStats(item, 'comparison-stats-2');

            const item1Index = document.getElementById('compare-item-1').value;
            if (item1Index) {
                compareItems(allItems[item1Index], item);
            }
        });

        document.getElementById('calculate-button').addEventListener('click', calculateBulkSelling);

        window.addEventListener('click', (e) => {
            const modal = document.getElementById('comparison-modal');
            if (e.target === modal) {
                modal.style.display = 'none';
            }
        });

        // Initialize
        loadOwnedItems();
        updateStats();
        filterItems();
    </script>
</body>

</html>
